{
  "version": 3,
  "sources": ["../src/tracks.ts", "../src/player.ts", "../src/index.ts"],
  "sourcesContent": [
    "import trackJSON from '../tracks/tracks.json'\n\nexport type TrackMeta = {\n\tname: string\n\tslug: string\n\tdata: string\n}\n\nexport type TrackInfo = {\n\tname: string\n\tpath: string\n}\n\nconst tracks: { [key:string]: TrackInfo } = trackJSON\n\nexport default class Tracks {\n\tdata: { [key:string]: TrackMeta } = {}\n\tbufferCache: { [key:string]: AudioBuffer } = {}\n\tbaseURL: string\n\n\tconstructor(baseURL:string) {\n\t\tthis.baseURL = baseURL\n\t}\n\n\t// the method that the loaded scripts will call\n\tstatic async _register(name:string, data:string) {\n\t\tconst slug = name.toLowerCase().replace(/ /g, '-')\n\n\t\t// dispatch event with audio buffer\n\t\tconst event = new CustomEvent(`af-audio-loaded-${slug}`, {\n\t\t\tdetail: {\n\t\t\t\tname: name,\n\t\t\t\tslug: slug,\n\t\t\t\tdata: data\n\t\t\t}\n\t\t})\n\n\t\tdocument.dispatchEvent(event)\n\t}\n\n\tload(slug:string):Promise<TrackMeta> {\n\t\tif(!this.get(slug)) {\n\t\t\treturn Promise.reject('Track not found')\n\t\t}\n\n\t\tif(this.getLoaded(slug)) {\n\t\t\treturn Promise.resolve(this.getLoaded(slug))\n\t\t}\n\n\t\t// load a script tag and set up. The script will call _register to set things up\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(!this.get(slug)) {\n\t\t\t\treturn reject('Track not found')\n\t\t\t}\n\n\t\t\tconst url = new URL(this.baseURL)\n\t\t\turl.pathname = this.get(slug).path\n\n\t\t\tconst script = document.createElement('script')\n\t\t\tscript.src   = url.toString()\n\t\t\tscript.async = true\n\n\t\t\tconst onload = (e:Event) => {\n\t\t\t\tconst customEvent = e as CustomEvent<TrackMeta>\n\t\t\t\tconst trackMeta = customEvent.detail\n\t\t\t\tthis.data[slug] = trackMeta\n\n\t\t\t\t// cleanup\n\t\t\t\tdocument.removeEventListener(`af-audio-loaded-${slug}`, onload)\n\t\t\t\tdocument.head.removeChild(script)\n\n\t\t\t\tresolve(trackMeta)\n\t\t\t}\n\n\t\t\t// listen for message with audio buffer\n\t\t\tdocument.addEventListener(`af-audio-loaded-${slug}`, onload)\n\n\t\t\tscript.onerror = (err) => {\n\t\t\t\treject(err)\n\t\t\t}\n\t\t\tdocument.head.appendChild(script)\n\t\t})\n\t}\n\n\n\tgetAll() {\n\t\treturn tracks;\n\t}\n\n\tget(slug:string) {\n\t\treturn tracks[slug]\n\t}\n\n\tgetLoaded(slug:string) {\n\t\treturn this.data[slug]\n\t}\n\n\tgetAllLoaded() {\n\t\treturn this.data\n\t}\n}\n",
    "import Tracks from \"./tracks\"\n\nexport default class Player {\n\taudioCtx: AudioContext = new AudioContext()\n\tsource: AudioBufferSourceNode | null = null\n\tisStarted: boolean = false\n\ttracks: Tracks\n\n\tconstructor(baseURL:string) {\n\t\tthis.tracks = new Tracks(baseURL)\n\t}\n\t\n\tasync load(slug:string) {\n\t\tif ( ! this.tracks.get(slug) ) {\n\t\t\tconsole.error(\"Track not found\")\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\t// load the track data\n\t\t\tconst trackData = await this.tracks.load(slug)\n\n\t\t\t// stackoverflow\n\t\t\tvar binaryString = atob(trackData.data.split(',')[1]);\n\t\t\tvar bytes = new Uint8Array(binaryString.length);\n\t\t\tfor (var i = 0; i < binaryString.length; i++) {\n\t\t\t\tbytes[i] = binaryString.charCodeAt(i);\n\t\t\t}\n\n\t\t\tthis.audioCtx.decodeAudioData(bytes.buffer)\n\t\t\t\t.then(this.loadSource.bind(this))\n\t\t\t\t.catch(this.handleError.bind(this))\n\t\t} catch (err) {\n\t\t\tthis.handleError(err)\n\t\t}\t\t\n\t}\n\t\n\tloadSource(audioBuffer: AudioBuffer) {\n\t\t\tthis.source = this.audioCtx.createBufferSource();\n\t\t\tthis.source.buffer = audioBuffer;\n\t\t\tthis.source.connect(this.audioCtx.destination);\n\t}\n\t\n\thandleError(err: any) {\n\t\t\tconsole.error(\"Error decoding audio data:\", err);\n\t}\n\t\n\tstart() {\n\t\t\tif(this.source) {\n\t\t\t\t\tthis.source.start()\n\t\t\t\t\tthis.isStarted = true\n\t\t\t}\n\t}\n\t\n\tstop() {\n\t\t\tif(this.source) {\n\t\t\t\tthis.source.stop()\n\t\t\t\tthis.isStarted = false\n\t\t\t}\n\t}\n}",
    "import Player from \"./player\"\nimport Tracks from \"./tracks\";\n\n// expose the Player class to the window object\nwindow.AFPlayer = Player;\nwindow.AFTracks = Tracks;\n"
  ],
  "mappings": "8EAaA,IAAM,EAAsC,EAE5C,MAAqB,CAAO,CAC3B,KAAoC,CAAC,EACrC,YAA6C,CAAC,EAC9C,QAEA,WAAW,CAAC,EAAgB,CAC3B,KAAK,QAAU,cAIH,UAAS,CAAC,EAAa,EAAa,CAChD,MAAM,EAAO,EAAK,YAAY,EAAE,QAAQ,KAAM,GAAG,EAG3C,EAAQ,IAAI,YAAY,mBAAmB,IAAQ,CACxD,OAAQ,CACP,KAAM,EACN,KAAM,EACN,KAAM,CACP,CACD,CAAC,EAED,SAAS,cAAc,CAAK,EAG7B,IAAI,CAAC,EAAgC,CACpC,IAAI,KAAK,IAAI,CAAI,EAChB,OAAO,QAAQ,OAAO,iBAAiB,EAGxC,GAAG,KAAK,UAAU,CAAI,EACrB,OAAO,QAAQ,QAAQ,KAAK,UAAU,CAAI,CAAC,EAI5C,OAAO,IAAI,QAAQ,CAAC,EAAS,IAAW,CACvC,IAAI,KAAK,IAAI,CAAI,EAChB,OAAO,EAAO,iBAAiB,EAGhC,MAAM,EAAM,IAAI,IAAI,KAAK,OAAO,EAChC,EAAI,SAAW,KAAK,IAAI,CAAI,EAAE,KAE9B,MAAM,EAAS,SAAS,cAAc,QAAQ,EAC9C,EAAO,IAAQ,EAAI,SAAS,EAC5B,EAAO,MAAQ,GAEf,MAAM,EAAS,CAAC,IAAY,CAE3B,MAAM,EADc,EACU,OAC9B,KAAK,KAAK,GAAQ,EAGlB,SAAS,oBAAoB,mBAAmB,IAAQ,CAAM,EAC9D,SAAS,KAAK,YAAY,CAAM,EAEhC,EAAQ,CAAS,GAIlB,SAAS,iBAAiB,mBAAmB,IAAQ,CAAM,EAE3D,EAAO,QAAU,CAAC,IAAQ,CACzB,EAAO,CAAG,GAEX,SAAS,KAAK,YAAY,CAAM,EAChC,EAIF,MAAM,EAAG,CACR,OAAO,EAGR,GAAG,CAAC,EAAa,CAChB,OAAO,EAAO,GAGf,SAAS,CAAC,EAAa,CACtB,OAAO,KAAK,KAAK,GAGlB,YAAY,EAAG,CACd,OAAO,KAAK,KAEd,CClGA,MAAqB,CAAO,CAC3B,SAAyB,IAAI,aAC7B,OAAuC,KACvC,UAAqB,GACrB,OAEA,WAAW,CAAC,EAAgB,CAC3B,KAAK,OAAS,IAAI,EAAO,CAAO,OAG3B,KAAI,CAAC,EAAa,CACvB,IAAO,KAAK,OAAO,IAAI,CAAI,EAAI,CAC9B,QAAQ,MAAM,iBAAiB,EAC/B,OAGD,GAAI,CAEH,MAAM,EAAY,MAAM,KAAK,OAAO,KAAK,CAAI,EAG7C,IAAI,EAAe,KAAK,EAAU,KAAK,MAAM,GAAG,EAAE,EAAE,EAChD,EAAQ,IAAI,WAAW,EAAa,MAAM,EAC9C,QAAS,EAAI,EAAG,EAAI,EAAa,OAAQ,IACxC,EAAM,GAAK,EAAa,WAAW,CAAC,EAGrC,KAAK,SAAS,gBAAgB,EAAM,MAAM,EACxC,KAAK,KAAK,WAAW,KAAK,IAAI,CAAC,EAC/B,MAAM,KAAK,YAAY,KAAK,IAAI,CAAC,QAC3B,EAAP,CACD,KAAK,YAAY,CAAG,GAItB,UAAU,CAAC,EAA0B,CACnC,KAAK,OAAS,KAAK,SAAS,mBAAmB,EAC/C,KAAK,OAAO,OAAS,EACrB,KAAK,OAAO,QAAQ,KAAK,SAAS,WAAW,EAG/C,WAAW,CAAC,EAAU,CACpB,QAAQ,MAAM,6BAA8B,CAAG,EAGjD,KAAK,EAAG,CACN,GAAG,KAAK,OACN,KAAK,OAAO,MAAM,EAClB,KAAK,UAAY,GAIrB,IAAI,EAAG,CACL,GAAG,KAAK,OACP,KAAK,OAAO,KAAK,EACjB,KAAK,UAAY,GAGrB,CCxDA,OAAO,SAAW,EAClB,OAAO,SAAW",
  "debugId": "2F6EE26AEC66B1BA64756E2164756E21",
  "names": []
}