{
  "version": 3,
  "sources": ["../tracks/tracks.json", "../src/tracks.ts", "../src/player.ts", "../src/index.ts"],
  "sourcesContent": ["{\n  \"kangaroo-game\": {\n    \"name\": \"Kangaroo-Game\",\n    \"path\": \"tracks/kangaroo-game.js\"\n  }\n}", "import trackJSON from '../tracks/tracks.json'\n\nexport type TrackMeta = {\n\tname: string\n\tslug: string\n\tdata: string\n}\n\nexport type TrackInfo = {\n\tname: string\n\tpath: string\n}\n\nconst tracks: { [key:string]: TrackInfo } = trackJSON\n\nexport default class Tracks {\n\tdata: { [key:string]: TrackMeta } = {}\n\tbufferCache: { [key:string]: AudioBuffer } = {}\n\tbaseURL: string\n\n\tconstructor(baseURL:string) {\n\t\tthis.baseURL = baseURL\n\t}\n\n\t// the method that the loaded scripts will call\n\tstatic async _register(name:string, data:string) {\n\t\tconst slug = name.toLowerCase().replace(/ /g, '-')\n\n\t\t// dispatch event with audio buffer\n\t\tconst event = new CustomEvent(`af-audio-loaded-${slug}`, {\n\t\t\tdetail: {\n\t\t\t\tname: name,\n\t\t\t\tslug: slug,\n\t\t\t\tdata: data\n\t\t\t}\n\t\t})\n\n\t\tdocument.dispatchEvent(event)\n\t}\n\n\tload(slug:string):Promise<TrackMeta> {\n\t\tif(!this.get(slug)) {\n\t\t\treturn Promise.reject('Track not found')\n\t\t}\n\n\t\tif(this.getLoaded(slug)) {\n\t\t\treturn Promise.resolve(this.getLoaded(slug))\n\t\t}\n\n\t\t// load a script tag and set up. The script will call _register to set things up\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif(!this.get(slug)) {\n\t\t\t\treturn reject('Track not found')\n\t\t\t}\n\n\t\t\tconst script = document.createElement('script')\n\t\t\tscript.src   = this.baseURL + this.get(slug).path\n\t\t\tscript.async = true\n\n\t\t\tconst onload = (e:Event) => {\n\t\t\t\tconst customEvent = e as CustomEvent<TrackMeta>\n\t\t\t\tconst trackMeta = customEvent.detail\n\t\t\t\tthis.data[slug] = trackMeta\n\n\t\t\t\t// cleanup\n\t\t\t\tdocument.removeEventListener(`af-audio-loaded-${slug}`, onload)\n\t\t\t\tdocument.head.removeChild(script)\n\n\t\t\t\tresolve(trackMeta)\n\t\t\t}\n\n\t\t\t// listen for message with audio buffer\n\t\t\tdocument.addEventListener(`af-audio-loaded-${slug}`, onload)\n\n\t\t\tscript.onerror = () => {\n\t\t\t\treject('error loading script')\n\t\t\t}\n\t\t\tdocument.head.appendChild(script)\n\t\t})\n\t}\n\n\n\tgetAll() {\n\t\treturn tracks;\n\t}\n\n\tget(slug:string) {\n\t\treturn tracks[slug]\n\t}\n\n\tgetLoaded(slug:string) {\n\t\treturn this.data[slug]\n\t}\n\n\tgetAllLoaded() {\n\t\treturn this.data\n\t}\n}\n", "import Tracks from \"./tracks\"\n\nexport default class Player {\n\taudioCtx: AudioContext = new AudioContext()\n\tsource: AudioBufferSourceNode | null = null\n\tisStarted: boolean = false\n\ttracks: Tracks\n\n\tconstructor(baseURL: string) {\n\t\tthis.tracks = new Tracks(baseURL)\n\t}\n\n\tasync load(slug: string) {\n\t\tif (!this.tracks.get(slug)) {\n\t\t\tconsole.error(\"Track not found\")\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\t// load the track data\n\t\t\tconst trackData = await this.tracks.load(slug)\n\n\t\t\t// stackoverflow\n\t\t\tvar binaryString = atob(trackData.data.split(',')[1]);\n\t\t\tvar bytes = new Uint8Array(binaryString.length);\n\t\t\tfor (var i = 0; i < binaryString.length; i++) {\n\t\t\t\tbytes[i] = binaryString.charCodeAt(i);\n\t\t\t}\n\n\t\t\tthis.audioCtx.decodeAudioData(bytes.buffer)\n\t\t\t\t.then(this.loadSource.bind(this))\n\t\t\t\t.catch(this.handleError.bind(this))\n\t\t} catch (err) {\n\t\t\tthis.handleError(err)\n\t\t}\n\t}\n\n\tloadSource(audioBuffer: AudioBuffer) {\n\t\tthis.source = this.audioCtx.createBufferSource();\n\t\tthis.source.buffer = audioBuffer;\n\t\tthis.source.connect(this.audioCtx.destination);\n\t}\n\n\thandleError(err: any) {\n\t\tconsole.error(\"Error decoding audio data:\", err);\n\t}\n\n\tstart() {\n\t\tif (this.source) {\n\t\t\tthis.source.start()\n\t\t\tthis.isStarted = true\n\t\t}\n\t}\n\n\tstop() {\n\t\tif (this.source) {\n\t\t\tthis.source.stop()\n\t\t\tthis.isStarted = false\n\t\t}\n\t}\n}", "import Player from \"./player\"\nimport Tracks from \"./tracks\";\n\n// expose the Player class to the window object\nwindow.AFPlayer = Player;\nwindow.AFTracks = Tracks;\n\nconsole.log(\"Audio Framework loaded\");\n"],
  "mappings": "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",
  "names": ["tracks_default", "tracks", "tracks_default", "Tracks", "baseURL", "__publicField", "name", "data", "slug", "event", "resolve", "reject", "script", "onload", "e", "trackMeta", "Player", "baseURL", "__publicField", "Tracks", "slug", "trackData", "binaryString", "bytes", "i", "err", "audioBuffer", "Player", "Tracks"]
}
